
graph library:
https://github.com/Terae/Graph

OpenList & ClosedList stuff 4 the realz ????????????????????????????????????????
OpenList beginnt mit allen Start-Nodes sortiert nach ihrem f-Wert (g + h).
Immer das Vorderste aus der OpenList herausnehmen.
Diese Node dann expandieren.
Die expandierte Node dann hinten an die ClosedList anfuegen.
Die children dann in die OpenList einsortieren sortiert nach ihrem f-Wert (g + h).
Am Ende sollte dann der "Pfad" in der ClosedList sein.
- Notizen aus Vorlesung beachten.

????????
https://de.wikipedia.org/wiki/A*-Algorithmus
https://www.youtube.com/watch?v=M9AS81mHCAc
https://www.youtube.com/watch?v=ySN5Wnu88nE
http://mat.uab.cat/~alseda/MasterOpt/AStar-Algorithm.pdf
https://www.redblobgames.com/pathfinding/a-star/introduction.html
https://www.redblobgames.com/pathfinding/a-star/implementation.html

- use an enumerator for the node identifier

put in some example stuff that actually works
akin to the map of cities in romania used in the text book

try to make shit work with permissable but non-monotonic heuristic.

import graph from file.
export graph to .dot file and try to display it with graphviz
export path to .dot file and try to display it with graphviz maybe perhaps

README.md
-> general description
-> Prerequisites: git, CMake, g++-7, doxygen, clang-format etc. and how to install them
-> add instructions as to how to clone the repo (--recursive)
-> add instructions as to how to build
-> GNU/Linux only!
-> how to generate documentation
-> where to find documentation of the dependencies
-> descriptions for the files / directories

consider enabling compiler optmiziations if shit gets slow or something
-> debug mode (with debugging symbols)
-> release mode (with optimizations)

try the shit on laptop

add tests

add documentation

simplify dramatically

migrate to windows

migrate to Java

